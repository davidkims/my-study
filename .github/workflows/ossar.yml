name: OSSAR Security Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '25 11 * * 6'  # 매주 토요일 11:25 AM 실행

permissions:
  contents: read
  security-events: write

jobs:
  ossar-analysis:
    runs-on: windows-latest  # Ubuntu/MacOS 지원시 확장 가능
    timeout-minutes: 30
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # 보안 분석을 위한 최적화

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '3.1.x'  # OSSAR 필수 종속성

    - name: Run OSSAR Analysis
      uses: github/ossar-action@v1
      id: ossar-scan
      with:
        scan_path: ${{ github.workspace }}
        output_format: SARIF
        output_file: ossar-results.sarif
      continue-on-error: true  # 결과 업로드 보장

    - name: Upload SARIF Results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.ossar-scan.outputs.sarifFile || './ossar-results.sarif' }}
        category: "OSSAR"
        check_name: "Open Source Security Analysis"

    - name: Cache .NET Packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # 보안 결과 정리 (선택적)
    - name: Cleanup Artifacts
      if: always()
      run: |
        Remove-Item -Path ./ossar-results.sarif -Force -ErrorAction SilentlyContinue
