name: Infra DevOps Full Automation

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  infra:
    runs-on: ubuntu-latest

    env:
      SLOT_ID: ${{ github.run_id }}
      SLOT_DIR: .disk-slots/slot-${{ github.run_id }}
      JAR_PATH: ./target/app.jar
      DB_NAME: mydb
      DB_USER: postgres
      DB_PASS: postgres
      DB_HOST: 127.0.0.1
      S3_BUCKET: my-pages-reports-bucket
      EMAIL_TO: your@email.com

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup JDK and Python
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install packages
        run: |
          sudo apt update && sudo apt install -y unzip tree mailutils awscli postgresql postgresql-client python3-pip
          pip3 install fastapi uvicorn psycopg2-binary

      # Spring Boot 빌드
      - name: Build Spring Boot App
        run: |
          mkdir -p target
          echo 'public class Main { public static void main(String[] args) { System.out.println("Hello Spring Boot"); } }' > Main.java
          javac Main.java -d target
          echo 'Manifest-Version: 1.0\nMain-Class: Main' > manifest.txt
          jar cfm ${{ env.JAR_PATH }} manifest.txt -C target/ .

      # Spring Boot JAR 실행 확인
      - name: Run JAR
        run: |
          java -jar ${{ env.JAR_PATH }} > ${{ env.SLOT_DIR }}/logs/jar_output.log || true

      # FastAPI 서버 및 DB 연동
      - name: Run FastAPI with DB
        run: |
          echo 'from fastapi import FastAPI, UploadFile, File
import psycopg2
app = FastAPI()

@app.get("/health")
def health(): return {"status": "ok"}

@app.post("/upload")
async def upload(file: UploadFile = File(...)):
    with open(f"uploads/{file.filename}", "wb") as f:
        f.write(await file.read())
    return {"filename": file.filename}

@app.get("/db")
def db_connect():
    conn = psycopg2.connect(
        dbname="${{ env.DB_NAME }}",
        user="${{ env.DB_USER }}",
        password="${{ env.DB_PASS }}",
        host="${{ env.DB_HOST }}"
    )
    cur = conn.cursor()
    cur.execute("SELECT version();")
    return {"db_version": cur.fetchone()}
' > app.py

          mkdir -p uploads
          nohup uvicorn app:app --host 0.0.0.0 --port 8000 & echo $! > uvicorn.pid
          sleep 5
          curl -f http://localhost:8000/health

      # 보안 로그 생성 및 리포트 압축
      - name: Generate Reports & Logs
        run: |
          mkdir -p ${{ env.SLOT_DIR }}/logs
          echo "[AUDIT] User login" > ${{ env.SLOT_DIR }}/logs/audit.log
          echo "[ACCESS] File uploaded" > ${{ env.SLOT_DIR }}/logs/access.log
          echo "Build successful for slot ${{ env.SLOT_ID }}" > ${{ env.SLOT_DIR }}/logs/report.log
          tar czf ${{ env.SLOT_DIR }}/logs/report.tar.gz -C ${{ env.SLOT_DIR }}/logs .

      # 리포트 → S3 업로드
      - name: Upload report to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws s3 cp ${{ env.SLOT_DIR }}/logs/report.tar.gz s3://${{ env.S3_BUCKET }}/slot-${{ env.SLOT_ID }}/report.tar.gz

      # 로그 전송 (CloudWatch 예시)
      - name: Push logs to CloudWatch
        run: |
          GROUP="DevOpsLogs"
          STREAM="slot-${{ env.SLOT_ID }}"
          aws logs create-log-stream --log-group-name $GROUP --log-stream-name $STREAM || true
          TIMESTAMP=$(($(date +%s%3N)))
          LOG="{\"logEvents\":[{\"timestamp\":$TIMESTAMP,\"message\":\"Spring Boot + FastAPI 실행 완료\"}]}"
          aws logs put-log-events --log-group-name $GROUP --log-stream-name $STREAM --log-events file://<(echo $LOG)

      # index 생성
      - name: Generate index.md
        run: |
          cat <<EOF > index.md
          ---
          layout: default
          title: Full Infra 자동화 보고서
          ---

          # ☁️ 자동화 보고서

          ✅ Spring Boot 빌드 및 실행  
          ✅ FastAPI + PostgreSQL 헬스체크  
          ✅ 파일 업로드: /upload  
          ✅ 보안 로그 생성 및 리포트 압축  
          ✅ S3 업로드 및 CloudWatch 전송  

          ## FastAPI Health Check
          \`\`\`
          curl http://localhost:8000/health
          \`\`\`

          ## S3 리포트
          s3://${{ env.S3_BUCKET }}/slot-${{ env.SLOT_ID }}/report.tar.gz
          EOF

      - name: Generate _config.yml
        run: |
          echo 'title: DevOps Infra\ninclude:\n  - .disk-slots\n  - uploads\n  - .github' > _config.yml

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: infra

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
