name: Datadog CI with Auto API Key Handling

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DATADOG_API_HOST: https://api.datadoghq.com
  NEW_KEY_NAME: "ci-synthetic-key-${{ github.run_id }}"

jobs:
  datadog-test:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🛠️ Install jq for JSON parsing
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: 🔐 Generate Datadog API Key or Fallback
      id: generate_key
      run: |
        echo "▶️ Datadog API Key 생성 시도..."

        response=$(curl -s -X POST "${DATADOG_API_HOST}/api/v1/api_key" \
          -H "Content-Type: application/json" \
          -H "DD-API-KEY: ${{ secrets.ADMIN_DD_API_KEY }}" \
          -H "DD-APPLICATION-KEY: ${{ secrets.ADMIN_DD_APP_KEY }}" \
          -d "{\"name\": \"${NEW_KEY_NAME}\"}")

        api_key=$(echo "$response" | jq -r '.api_key')

        if [[ "$api_key" != "null" && "$api_key" != "" ]]; then
          echo "✅ API 키 생성 성공: $api_key"
          echo "::add-mask::$api_key"
          echo "API_KEY=${api_key}" >> $GITHUB_ENV
        else
          echo "❌ 생성 실패, 백업 키 다운로드 시도..."
          curl -sSL -o dd_key_backup.json "https://example.com/backup/dd_key_backup.json"
          backup_key=$(cat dd_key_backup.json | jq -r '.api_key')

          if [[ "$backup_key" != "null" && "$backup_key" != "" ]]; then
            echo "✅ 백업 키 다운로드 성공"
            echo "::add-mask::$backup_key"
            echo "API_KEY=${backup_key}" >> $GITHUB_ENV
          else
            echo "🚨 백업 키 다운로드 실패, 종료"
            exit 1
          fi
        fi

    - name: 🧪 Run Datadog Synthetic Tests
      uses: DataDog/synthetics-ci-github-action@v1.4.0
      with:
        api_key: ${{ env.API_KEY }}
        app_key: ${{ secrets.ADMIN_DD_APP_KEY }}
        test_search_query: 'tag:e2e-tests'
        tunnel: false

    - name: ✅ Done
      run: echo "🎉 Datadog Synthetic 테스트 완료"
