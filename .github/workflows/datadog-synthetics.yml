name: Datadog Synthetic Test with Key Automation

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  DATADOG_API_HOST: https://api.datadoghq.com
  NEW_API_KEY_NAME: "ci-api-key-${{ github.run_id }}"
  NEW_APP_KEY_NAME: "ci-app-key-${{ github.run_id }}"
  BACKUP_API_KEY_URL: "https://your-bucket.s3.amazonaws.com/dd_api_key_backup.json?X-Amz-Algorithm=..."
  BACKUP_APP_KEY_URL: "https://your-bucket.s3.amazonaws.com/dd_app_key_backup.json?X-Amz-Algorithm=..."

jobs:
  datadog-test:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🧰 Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl

    - name: 🔐 Generate Datadog API Key or use Backup
      id: generate_api_key
      run: |
        echo "▶️ API Key 생성 시도 중..."

        response=$(curl -s -X POST "${DATADOG_API_HOST}/api/v1/api_key" \
          -H "Content-Type: application/json" \
          -H "DD-API-KEY: ${{ secrets.ADMIN_DD_API_KEY }}" \
          -H "DD-APPLICATION-KEY: ${{ secrets.ADMIN_DD_APP_KEY }}" \
          -d "{\"name\": \"${NEW_API_KEY_NAME}\"}")

        new_api_key=$(echo "$response" | jq -r '.api_key')

        if [[ "$new_api_key" != "null" && "$new_api_key" != "" ]]; then
          echo "✅ API Key 생성 성공"
          echo "::add-mask::$new_api_key"
          echo "DD_API_KEY=${new_api_key}" >> $GITHUB_ENV
        else
          echo "❌ 생성 실패. Presigned URL에서 백업 키 다운로드..."
          curl -sSL -o dd_api_key_backup.json "$BACKUP_API_KEY_URL"

          if jq -e .api_key dd_api_key_backup.json >/dev/null 2>&1; then
            backup_api_key=$(jq -r '.api_key' dd_api_key_backup.json)
            echo "::add-mask::$backup_api_key"
            echo "DD_API_KEY=${backup_api_key}" >> $GITHUB_ENV
          else
            echo "🚨 백업 API 키 JSON 파싱 실패"
            cat dd_api_key_backup.json
            exit 1
          fi
        fi

    - name: 🔐 Generate Datadog App Key or use Backup
      id: generate_app_key
      run: |
        echo "▶️ App Key 생성 시도 중..."

        response=$(curl -s -X POST "${DATADOG_API_HOST}/api/v2/application_keys" \
          -H "Content-Type: application/json" \
          -H "DD-API-KEY: ${{ secrets.ADMIN_DD_API_KEY }}" \
          -H "DD-APPLICATION-KEY: ${{ secrets.ADMIN_DD_APP_KEY }}" \
          -d "{\"name\": \"${NEW_APP_KEY_NAME}\"}")

        new_app_key=$(echo "$response" | jq -r '.data.attributes.key')

        if [[ "$new_app_key" != "null" && "$new_app_key" != "" ]]; then
          echo "✅ App Key 생성 성공"
          echo "::add-mask::$new_app_key"
          echo "DD_APP_KEY=${new_app_key}" >> $GITHUB_ENV
        else
          echo "❌ 생성 실패. Presigned URL에서 백업 키 다운로드..."
          curl -sSL -o dd_app_key_backup.json "$BACKUP_APP_KEY_URL"

          if jq -e .api_key dd_app_key_backup.json >/dev/null 2>&1; then
            backup_app_key=$(jq -r '.api_key' dd_app_key_backup.json)
            echo "::add-mask::$backup_app_key"
            echo "DD_APP_KEY=${backup_app_key}" >> $GITHUB_ENV
          else
            echo "🚨 백업 App 키 JSON 파싱 실패"
            cat dd_app_key_backup.json
            exit 1
          fi
        fi

    - name: 🧪 Run Datadog Synthetic Tests
      uses: DataDog/synthetics-ci-github-action@v1.4.0
      with:
        api_key: ${{ env.DD_API_KEY }}
        app_key: ${{ env.DD_APP_KEY }}
        test_search_query: 'tag:e2e-tests'
        tunnel: false

    - name: 🔁 Optional: Rotate/delete created keys (보안 관리용)
      if: always()
      run: |
        echo "🔐 생성된 키 회전 또는 삭제는 Datadog API를 통해 수동 또는 자동으로 수행할 수 있습니다."
        echo "🔗 https://docs.datadoghq.com/api/latest/api-keys/ 참고"

    - name: ✅ Done
      run: echo "🎉 Datadog Synthetic 테스트 완료"
