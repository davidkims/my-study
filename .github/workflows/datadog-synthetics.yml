name: Datadog Synthetic CI - Full Automation

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  DATADOG_API_HOST: https://api.datadoghq.com
  BUCKET_NAME: your-bucket-name
  SLOT_PREFIX: disk-slot

jobs:
  datadog-test:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set timestamp and slot directory
      run: |
        TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        echo "SLOT_DIR=${SLOT_PREFIX}/slot-${TIMESTAMP}" >> $GITHUB_ENV

    - name: Install required tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl file

    - name: Generate Datadog API Key or restore from S3
      run: |
        echo "▶️ Creating Datadog API key..."
        response=$(curl -s -X POST "${DATADOG_API_HOST}/api/v1/api_key" \
          -H "Content-Type: application/json" \
          -H "DD-API-KEY: ${{ secrets.ADMIN_DD_API_KEY }}" \
          -H "DD-APPLICATION-KEY: ${{ secrets.ADMIN_DD_APP_KEY }}" \
          -d "{\"name\": \"api-${TIMESTAMP}\"}")
        api_key=$(echo "$response" | jq -r '.api_key')

        if [[ "$api_key" != "null" && "$api_key" != "" ]]; then
          echo "::add-mask::$api_key"
          echo "DD_API_KEY=${api_key}" >> $GITHUB_ENV
          mkdir -p "${{ env.SLOT_DIR }}"
          echo "{\"api_key\": \"$api_key\"}" > "${{ env.SLOT_DIR }}/dd_api_key_backup.json"
          aws s3 cp "${{ env.SLOT_DIR }}/dd_api_key_backup.json" "s3://${{ env.BUCKET_NAME }}/${{ env.SLOT_DIR }}/"
        else
          echo "❌ API key creation failed. Trying to restore from backup..."
          aws s3 cp "s3://${{ env.BUCKET_NAME }}/${{ env.SLOT_DIR }}/dd_api_key_backup.json" "dd_api_key_backup.json"
          content_type=$(file -b --mime-type dd_api_key_backup.json)
          if [[ "$content_type" != "application/json" ]]; then
            echo "Invalid backup API key format: $content_type"
            cat dd_api_key_backup.json
            exit 1
          fi
          api_key=$(jq -r '.api_key' dd_api_key_backup.json)
          echo "::add-mask::$api_key"
          echo "DD_API_KEY=${api_key}" >> $GITHUB_ENV
        fi

    - name: Generate Datadog App Key or restore from S3
      run: |
        echo "▶️ Creating Datadog App key..."
        response=$(curl -s -X POST "${DATADOG_API_HOST}/api/v2/application_keys" \
          -H "Content-Type: application/json" \
          -H "DD-API-KEY: ${{ secrets.ADMIN_DD_API_KEY }}" \
          -H "DD-APPLICATION-KEY: ${{ secrets.ADMIN_DD_APP_KEY }}" \
          -d "{\"name\": \"app-${TIMESTAMP}\"}")
        app_key=$(echo "$response" | jq -r '.data.attributes.key')

        if [[ "$app_key" != "null" && "$app_key" != "" ]]; then
          echo "::add-mask::$app_key"
          echo "DD_APP_KEY=${app_key}" >> $GITHUB_ENV
          mkdir -p "${{ env.SLOT_DIR }}"
          echo "{\"api_key\": \"$app_key\"}" > "${{ env.SLOT_DIR }}/dd_app_key_backup.json"
          aws s3 cp "${{ env.SLOT_DIR }}/dd_app_key_backup.json" "s3://${{ env.BUCKET_NAME }}/${{ env.SLOT_DIR }}/"
        else
          echo "❌ App key creation failed. Trying to restore from backup..."
          aws s3 cp "s3://${{ env.BUCKET_NAME }}/${{ env.SLOT_DIR }}/dd_app_key_backup.json" "dd_app_key_backup.json"
          content_type=$(file -b --mime-type dd_app_key_backup.json)
          if [[ "$content_type" != "application/json" ]]; then
            echo "Invalid backup App key format: $content_type"
            cat dd_app_key_backup.json
            exit 1
          fi
          app_key=$(jq -r '.api_key' dd_app_key_backup.json)
          echo "::add-mask::$app_key"
          echo "DD_APP_KEY=${app_key}" >> $GITHUB_ENV
        fi

    - name: Run Datadog Synthetic Tests
      uses: DataDog/synthetics-ci-github-action@v1.4.0
      with:
        api_key: ${{ env.DD_API_KEY }}
        app_key: ${{ env.DD_APP_KEY }}
        test_search_query: 'tag:e2e-tests'
        tunnel: false

    - name: Optional - Key Rotation or Deletion
      if: always()
      run: |
        echo "ℹ️ Use Datadog API to rotate or delete API keys:"
        echo "https://docs.datadoghq.com/api/latest/api-keys/"
        echo "https://docs.datadoghq.com/api/latest/application-keys/"
