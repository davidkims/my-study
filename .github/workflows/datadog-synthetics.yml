name: Datadog Synthetic Test Automation

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  DATADOG_API_HOST: https://api.datadoghq.com
  NEW_API_KEY_NAME: "ci-api-key-${{ github.run_id }}"
  NEW_APP_KEY_NAME: "ci-app-key-${{ github.run_id }}"
  BACKUP_API_KEY_URL: "https://your-bucket.s3.amazonaws.com/dd_api_key_backup.json?X-Amz-Algorithm=..."
  BACKUP_APP_KEY_URL: "https://your-bucket.s3.amazonaws.com/dd_app_key_backup.json?X-Amz-Algorithm=..."

jobs:
  datadog-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Tools (jq, curl)
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl

    - name: Generate Datadog API Key or Use Backup
      id: generate_api_key
      run: |
        echo "Creating Datadog API key..."
        response=$(curl -s -X POST "${DATADOG_API_HOST}/api/v1/api_key" \
          -H "Content-Type: application/json" \
          -H "DD-API-KEY: ${{ secrets.ADMIN_DD_API_KEY }}" \
          -H "DD-APPLICATION-KEY: ${{ secrets.ADMIN_DD_APP_KEY }}" \
          -d "{\"name\": \"${NEW_API_KEY_NAME}\"}")
        new_api_key=$(echo "$response" | jq -r '.api_key')
        if [[ "$new_api_key" != "null" && "$new_api_key" != "" ]]; then
          echo "::add-mask::$new_api_key"
          echo "DD_API_KEY=${new_api_key}" >> $GITHUB_ENV
        else
          echo "API key creation failed. Fetching from backup..."
          curl -sSL -o dd_api_key_backup.json "$BACKUP_API_KEY_URL"
          if jq -e .api_key dd_api_key_backup.json >/dev/null 2>&1; then
            backup_api_key=$(jq -r '.api_key' dd_api_key_backup.json)
            echo "::add-mask::$backup_api_key"
            echo "DD_API_KEY=${backup_api_key}" >> $GITHUB_ENV
          else
            echo "Backup API key JSON invalid"
            cat dd_api_key_backup.json
            exit 1
          fi
        fi

    - name: Generate Datadog App Key or Use Backup
      id: generate_app_key
      run: |
        echo "Creating Datadog App key..."
        response=$(curl -s -X POST "${DATADOG_API_HOST}/api/v2/application_keys" \
          -H "Content-Type: application/json" \
          -H "DD-API-KEY: ${{ secrets.ADMIN_DD_API_KEY }}" \
          -H "DD-APPLICATION-KEY: ${{ secrets.ADMIN_DD_APP_KEY }}" \
          -d "{\"name\": \"${NEW_APP_KEY_NAME}\"}")
        new_app_key=$(echo "$response" | jq -r '.data.attributes.key')
        if [[ "$new_app_key" != "null" && "$new_app_key" != "" ]]; then
          echo "::add-mask::$new_app_key"
          echo "DD_APP_KEY=${new_app_key}" >> $GITHUB_ENV
        else
          echo "App key creation failed. Fetching from backup..."
          curl -sSL -o dd_app_key_backup.json "$BACKUP_APP_KEY_URL"
          if jq -e .api_key dd_app_key_backup.json >/dev/null 2>&1; then
            backup_app_key=$(jq -r '.api_key' dd_app_key_backup.json)
            echo "::add-mask::$backup_app_key"
            echo "DD_APP_KEY=${backup_app_key}" >> $GITHUB_ENV
          else
            echo "Backup App key JSON invalid"
            cat dd_app_key_backup.json
            exit 1
          fi
        fi

    - name: Run Datadog Synthetic Tests
      uses: DataDog/synthetics-ci-github-action@v1.4.0
      with:
        api_key: ${{ env.DD_API_KEY }}
        app_key: ${{ env.DD_APP_KEY }}
        test_search_query: 'tag:e2e-tests'
        tunnel: false

    - name: Optional - Key Rotation or Deletion (Security Maintenance)
      if: always()
      run: |
        echo "You may rotate or delete keys via Datadog API:"
        echo "https://docs.datadoghq.com/api/latest/api-keys/"
        echo "https://docs.datadoghq.com/api/latest/application-keys/"

    - name: Done
      run: echo "âœ… Datadog Synthetic Test Completed"
