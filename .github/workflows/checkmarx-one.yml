name: Full Secure CI with Checkmarx + IBM Server + Disk Slot

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  actions: write
  security-events: write

jobs:
  full-pipeline:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set Environment Variables
      run: |
        TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        echo "SLOT_DIR=disk-slot/slot-${TIMESTAMP}" >> $GITHUB_ENV

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl unzip file openjdk-17-jdk

    - name: Create Disk Slot Directory
      run: |
        mkdir -p $SLOT_DIR/springboot-app
        mkdir -p $SLOT_DIR/sql/init
        mkdir -p $SLOT_DIR/reports/checkmarx

    - name: Generate Sample pom.xml and Application.java
      run: |
        cat <<EOF > $SLOT_DIR/springboot-app/pom.xml
        <project xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.example</groupId>
          <artifactId>demo</artifactId>
          <version>0.0.1-SNAPSHOT</version>
          <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>2.7.5</version>
          </parent>
          <dependencies>
            <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-web</artifactId>
            </dependency>
          </dependencies>
        </project>
        EOF

        mkdir -p $SLOT_DIR/springboot-app/src/main/java/com/example/demo
        cat <<EOF > $SLOT_DIR/springboot-app/src/main/java/com/example/demo/Application.java
        package com.example.demo;

        import org.springframework.boot.SpringApplication;
        import org.springframework.boot.autoconfigure.SpringBootApplication;

        @SpringBootApplication
        public class Application {
          public static void main(String[] args) {
            SpringApplication.run(Application.class, args);
          }
        }
        EOF

    - name: Generate Checkmarx Token (Manual OAuth2 Sample)
      run: |
        echo "⚙️ Getting Checkmarx Access Token..."
        TOKEN_RESPONSE=$(curl -s -X POST "https://ast.checkmarx.net/auth/realms/checkmarx/protocol/openid-connect/token" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "client_id=${{ secrets.CX_CLIENT_ID }}" \
          -d "client_secret=${{ secrets.CX_CLIENT_SECRET }}" \
          -d "grant_type=client_credentials")
        ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')
        echo "::add-mask::$ACCESS_TOKEN"
        echo "CHECKMARX_ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

    - name: Build Spring Boot App
      run: |
        cd $SLOT_DIR/springboot-app
        mvn clean install

    - name: Simulate IBM WebSphere Install (Mock Script)
      run: |
        echo "📦 Simulating IBM WebSphere Application Server install..."
        echo "Install completed at $SLOT_DIR/ibm/was" > $SLOT_DIR/ibm_install.log
        mkdir -p $SLOT_DIR/ibm/was

    - name: Run Checkmarx SAST Scan
      uses: checkmarx/ast-github-action@v1.0.11
      with:
        base_uri: https://ast.checkmarx.net
        cx_client_id: ${{ secrets.CX_CLIENT_ID }}
        cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
        cx_tenant: ${{ secrets.CX_TENANT }}
        project_name: ${{ github.repository }}
        branch: main
        additional_params: --report-format sarif --output-path ${{ env.SLOT_DIR }}/reports/checkmarx

    - name: Upload SARIF Result
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ env.SLOT_DIR }}/reports/checkmarx/cx_result.sarif

    - name: Done
      run: |
        echo "✅ Pipeline completed in slot: $SLOT_DIR"
