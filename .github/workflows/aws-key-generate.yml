name: Bootstrap OIDC and Generate IAM Access Key

on:
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  AWS_ACCOUNT_ID: "123456789012"
  ROLE_NAME: github-actions-oidc-role
  IAM_USER_NAME: github-deploy-user
  REPO_NAME: davidkims/my-repo

jobs:
  step1-create-oidc-role:
    name: Step 1 - Create OIDC Provider and IAM Role
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install AWS CLI and jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        python3 -m pip install --upgrade pip
        pip install awscli

    - name: Authenticate to AWS with access keys
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create OIDC provider, IAM role, and attach policy
      run: |
        echo "üìå Checking for existing OIDC provider..."
        OIDC_EXISTS=$(aws iam list-open-id-connect-providers | grep token.actions.githubusercontent.com || true)
        if [ -z "$OIDC_EXISTS" ]; then
          echo "‚úÖ Creating OIDC provider..."
          aws iam create-open-id-connect-provider \
            --url https://token.actions.githubusercontent.com \
            --client-id-list sts.amazonaws.com \
            --thumbprint-list 6938fd4d98bab03faadb97b34396831e3780aea1
        else
          echo "‚úÖ OIDC provider already exists."
        fi

        echo "üìå Creating IAM role for GitHub OIDC..."
        TRUST_POLICY=$(cat <<EOF
        {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Federated": "arn:aws:iam::${AWS_ACCOUNT_ID}:oidc-provider/token.actions.githubusercontent.com"
            },
            "Action": "sts:AssumeRoleWithWebIdentity",
            "Condition": {
              "StringLike": {
                "token.actions.githubusercontent.com:sub": "repo:${REPO_NAME}:*"
              },
              "StringEquals": {
                "token.actions.githubusercontent.com:aud": "sts.amazonaws.com"
              }
            }
          }]
        }
        EOF
        )

        aws iam create-role --role-name "${ROLE_NAME}" --assume-role-policy-document "$TRUST_POLICY" || echo "‚ÑπÔ∏è Role already exists."

        echo "üìå Attaching IAM inline policy..."
        POLICY=$(cat <<EOF
        {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Action": [
              "iam:CreateAccessKey",
              "iam:ListAccessKeys",
              "iam:GetUser",
              "iam:DeleteAccessKey"
            ],
            "Resource": "arn:aws:iam::${AWS_ACCOUNT_ID}:user/${IAM_USER_NAME}"
          }]
        }
        EOF
        )

        aws iam put-role-policy \
          --role-name "${ROLE_NAME}" \
          --policy-name allow-access-key \
          --policy-document "$POLICY"

  step2-create-key-via-oidc:
    name: Step 2 - Use OIDC and Generate Access Key
    needs: step1-create-oidc-role
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        python3 -m pip install --upgrade pip
        pip install awscli

    - name: Authenticate to AWS using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.ROLE_NAME }}
        aws-region: ${{ env.AWS_REGION }}
        audience: sts.amazonaws.com

    - name: Create Access Key
      run: |
        ACCESS_KEY_JSON=$(aws iam create-access-key --user-name $IAM_USER_NAME)
        echo "$ACCESS_KEY_JSON" > .github/workflows/key-log.log

        echo "‚úÖ Access key created and saved to key-log.log"
        ACCESS_KEY_ID=$(echo "$ACCESS_KEY_JSON" | jq -r .AccessKey.AccessKeyId)
        SECRET_KEY=$(echo "$ACCESS_KEY_JSON" | jq -r .AccessKey.SecretAccessKey)
        echo "ü™™ AccessKeyId: $ACCESS_KEY_ID"
        echo "üîê SecretAccessKey: $SECRET_KEY"

    - name: Commit Key Log
      run: |
        git config user.name "github-actions"
        git config user.email "actions@github.com"
        git add .github/workflows/key-log.log
        git commit -m "üîê IAM access key generated and logged"
        git push
