name: Secure CI - Auto Checkmarx Token + Slot Build

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  actions: write
  security-events: write

jobs:
  checkmarx-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set Disk Slot Timestamp
      run: |
        TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        echo "SLOT_DIR=disk-slot/slot-${TIMESTAMP}" >> $GITHUB_ENV

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl unzip file openjdk-17-jdk

    - name: Create Slot Directories
      run: |
        mkdir -p $SLOT_DIR/reports/checkmarx

    - name: 🔐 Get Checkmarx Access Token Automatically
      id: cx-auth
      env:
        CX_CLIENT_ID: ${{ secrets.CX_CLIENT_ID }}
        CX_CLIENT_SECRET: ${{ secrets.CX_CLIENT_SECRET }}
        CX_TENANT: ${{ secrets.CX_TENANT }}  # ✅ 핵심: 테넌트를 Secrets에서 가져옴
      run: |
        echo "🔑 테넌트 [$CX_TENANT]로 토큰 요청 시작..."

        # 1. 토큰 요청 (테넌트 URL에 동적 주입)
        TOKEN_RES=$(curl -s -X POST "https://iam.checkmarx.net/auth/realms/$CX_TENANT/protocol/openid-connect/token" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          --data-urlencode "client_id=$CX_CLIENT_ID" \
          --data-urlencode "client_secret=$CX_CLIENT_SECRET" \
          --data-urlencode "grant_type=client_credentials")

        # 2. HTTP 응답 검증
        if [[ -z "$TOKEN_RES" ]]; then
          echo "❌ 서버로부터 응답이 없습니다 (네트워크/인증 문제 의심)"
          exit 1
        fi

        # 3. JSON 유효성 검사
        if ! jq -e . <<< "$TOKEN_RES" &> /dev/null; then
          echo "❌ 잘못된 JSON 응답:"
          echo "$TOKEN_RES"
          exit 1
        fi

        # 4. 토큰 추출
        ACCESS_TOKEN=$(jq -r '.access_token' <<< "$TOKEN_RES")
        if [[ -z "$ACCESS_TOKEN" || "$ACCESS_TOKEN" == "null" ]]; then
          echo "❌ 토큰 추출 실패. 응답 내용:"
          jq <<< "$TOKEN_RES"
          exit 1
        fi

        echo "::add-mask::$ACCESS_TOKEN"
        echo "CHECKMARX_ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

    - name: ✅ Run Checkmarx Scan via CLI with Access Token
      env:
        CHECKMARX_ACCESS_TOKEN: ${{ env.CHECKMARX_ACCESS_TOKEN }}
        SLOT_DIR: ${{ env.SLOT_DIR }}
        CX_TENANT: ${{ secrets.CX_TENANT }}
      run: |
        curl -sLO https://downloads.checkmarx.com/cli/latest/Checkmarx-CLI.zip
        unzip Checkmarx-CLI.zip -d cxcli && chmod +x cxcli/cx
        ./cxcli/cx scan create \
          --project-name "${{ github.repository }}" \
          --branch-name main \
          --base-uri https://ast.checkmarx.net \
          --tenant "$CX_TENANT" \
          --access-token "$CHECKMARX_ACCESS_TOKEN" \
          --report-format sarif \
          --output-path "$SLOT_DIR/reports/checkmarx"

    - name: Upload SARIF Report
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ env.SLOT_DIR }}/reports/checkmarx/cx_result.sarif
